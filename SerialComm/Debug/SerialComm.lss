
SerialComm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00000318  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800208  00800208  000003b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fe6  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d41  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000427  00000000  00000000  000021ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000025d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000605  00000000  00000000  00002678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019e  00000000  00000000  00002c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002e1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e1       	ldi	r30, 0x18	; 24
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	af 30       	cpi	r26, 0x0F	; 15
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	17 d0       	rcall	.+46     	; 0x14e <main>
 120:	f9 c0       	rjmp	.+498    	; 0x314 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <daisy_chain_Test>:
	}
}

void daisy_chain_Test() {

	char rx_bit = PSerial_read(0);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	3b d0       	rcall	.+118    	; 0x19e <PSerial_read>
	PSerial_write(1, rx_bit);
 128:	68 2f       	mov	r22, r24
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	46 d0       	rcall	.+140    	; 0x1ba <PSerial_write>
	rx_bit = PSerial_read(2);
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	36 d0       	rcall	.+108    	; 0x19e <PSerial_read>
	PSerial_write(2, rx_bit);
 132:	68 2f       	mov	r22, r24
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	41 d0       	rcall	.+130    	; 0x1ba <PSerial_write>
	rx_bit = PSerial_read(3);
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	31 d0       	rcall	.+98     	; 0x19e <PSerial_read>
	PSerial_write(3, rx_bit);
 13c:	68 2f       	mov	r22, r24
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	3c d0       	rcall	.+120    	; 0x1ba <PSerial_write>
	rx_bit = PSerial_read(1);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	2c d0       	rcall	.+88     	; 0x19e <PSerial_read>
 146:	68 2f       	mov	r22, r24
	PSerial_write(0, rx_bit);
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	37 c0       	rjmp	.+110    	; 0x1ba <PSerial_write>
 14c:	08 95       	ret

0000014e <main>:
 14e:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <portNum>
int framingParam;

int main(void)
{
	portNum = 0;
	baud = 19200L;
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	9b e4       	ldi	r25, 0x4B	; 75
 156:	a0 e0       	ldi	r26, 0x00	; 0
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
 15e:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
 162:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <__data_end+0x2>
 166:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <__data_end+0x3>
	framingParam = SERIAL_8N1;
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <framingParam+0x1>
 172:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <framingParam>
 176:	c0 e0       	ldi	r28, 0x00	; 0
	int daisyChain = 1;
	
	if(daisyChain) {
		for(int i = 0; i < 4; i++)
			PSerial_open(i, baud, framingParam);
 178:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <framingParam>
 17c:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <framingParam+0x1>
 180:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <__data_end>
 184:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <__data_end+0x1>
 188:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <__data_end+0x2>
 18c:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <__data_end+0x3>
 190:	8c 2f       	mov	r24, r28
 192:	99 d0       	rcall	.+306    	; 0x2c6 <PSerial_open>
 194:	cf 5f       	subi	r28, 0xFF	; 255
	baud = 19200L;
	framingParam = SERIAL_8N1;
	int daisyChain = 1;
	
	if(daisyChain) {
		for(int i = 0; i < 4; i++)
 196:	c4 30       	cpi	r28, 0x04	; 4
		PSerial_open(portNum, baud, framingParam);
		
    while (1) 
    {
		if(daisyChain)
			daisy_chain_Test();
 198:	79 f7       	brne	.-34     	; 0x178 <main+0x2a>
 19a:	c4 df       	rcall	.-120    	; 0x124 <daisy_chain_Test>
 19c:	fe cf       	rjmp	.-4      	; 0x19a <main+0x4c>

0000019e <PSerial_read>:
UCSRnA 6 is Transmit Complete and 7 is Receive Complete
UCSRnB 3 is Transmit Enable and 4 is Receive Enable
*/
char PSerial_read(unsigned char port) {
	char c = 0;
	while(!(serial_port[port]->ucsra & (1 << 7))) {
 19e:	e8 2f       	mov	r30, r24
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	e0 50       	subi	r30, 0x00	; 0
 1a8:	fe 4f       	sbci	r31, 0xFE	; 254
 1aa:	01 90       	ld	r0, Z+
 1ac:	f0 81       	ld	r31, Z
 1ae:	e0 2d       	mov	r30, r0
 1b0:	80 81       	ld	r24, Z
 1b2:	88 23       	and	r24, r24
 1b4:	ec f7       	brge	.-6      	; 0x1b0 <PSerial_read+0x12>
	}
	c = serial_port[port]->udr; //c = read in the data;
 1b6:	86 81       	ldd	r24, Z+6	; 0x06
	return c;
}
 1b8:	08 95       	ret

000001ba <PSerial_write>:
void PSerial_write(unsigned char port, char data) {
	while(!(serial_port[port]->ucsra & (1 << 5))) {
 1ba:	e8 2f       	mov	r30, r24
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	ee 0f       	add	r30, r30
 1c0:	ff 1f       	adc	r31, r31
 1c2:	e0 50       	subi	r30, 0x00	; 0
 1c4:	fe 4f       	sbci	r31, 0xFE	; 254
 1c6:	01 90       	ld	r0, Z+
 1c8:	f0 81       	ld	r31, Z
 1ca:	e0 2d       	mov	r30, r0
 1cc:	80 81       	ld	r24, Z
 1ce:	85 ff       	sbrs	r24, 5
 1d0:	fd cf       	rjmp	.-6      	; 0x1cc <PSerial_write+0x12>
	}
	serial_port[port]->udr = data; //write in the data = data;
 1d2:	66 83       	std	Z+6, r22	; 0x06
 1d4:	08 95       	ret

000001d6 <setUBRR>:
}
int setUBRR(long baud) {
	switch(baud){
 1d6:	60 38       	cpi	r22, 0x80	; 128
 1d8:	20 e7       	ldi	r18, 0x70	; 112
 1da:	72 07       	cpc	r23, r18
 1dc:	81 05       	cpc	r24, r1
 1de:	91 05       	cpc	r25, r1
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <setUBRR+0xe>
 1e2:	56 c0       	rjmp	.+172    	; 0x290 <setUBRR+0xba>
 1e4:	0c f5       	brge	.+66     	; 0x228 <setUBRR+0x52>
 1e6:	60 38       	cpi	r22, 0x80	; 128
 1e8:	25 e2       	ldi	r18, 0x25	; 37
 1ea:	72 07       	cpc	r23, r18
 1ec:	81 05       	cpc	r24, r1
 1ee:	91 05       	cpc	r25, r1
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <setUBRR+0x1e>
 1f2:	45 c0       	rjmp	.+138    	; 0x27e <setUBRR+0xa8>
 1f4:	6c f4       	brge	.+26     	; 0x210 <setUBRR+0x3a>
 1f6:	60 36       	cpi	r22, 0x60	; 96
 1f8:	29 e0       	ldi	r18, 0x09	; 9
 1fa:	72 07       	cpc	r23, r18
 1fc:	81 05       	cpc	r24, r1
 1fe:	91 05       	cpc	r25, r1
 200:	09 f4       	brne	.+2      	; 0x204 <setUBRR+0x2e>
 202:	5e c0       	rjmp	.+188    	; 0x2c0 <setUBRR+0xea>
 204:	60 3c       	cpi	r22, 0xC0	; 192
 206:	72 41       	sbci	r23, 0x12	; 18
 208:	81 05       	cpc	r24, r1
 20a:	91 05       	cpc	r25, r1
 20c:	a9 f1       	breq	.+106    	; 0x278 <setUBRR+0xa2>
 20e:	55 c0       	rjmp	.+170    	; 0x2ba <setUBRR+0xe4>
 210:	60 34       	cpi	r22, 0x40	; 64
 212:	28 e3       	ldi	r18, 0x38	; 56
 214:	72 07       	cpc	r23, r18
 216:	81 05       	cpc	r24, r1
 218:	91 05       	cpc	r25, r1
 21a:	a1 f1       	breq	.+104    	; 0x284 <setUBRR+0xae>
 21c:	61 15       	cp	r22, r1
 21e:	7b 44       	sbci	r23, 0x4B	; 75
 220:	81 05       	cpc	r24, r1
 222:	91 05       	cpc	r25, r1
 224:	91 f1       	breq	.+100    	; 0x28a <setUBRR+0xb4>
 226:	49 c0       	rjmp	.+146    	; 0x2ba <setUBRR+0xe4>
 228:	61 15       	cp	r22, r1
 22a:	2c e2       	ldi	r18, 0x2C	; 44
 22c:	72 07       	cpc	r23, r18
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	82 07       	cpc	r24, r18
 232:	91 05       	cpc	r25, r1
 234:	b1 f1       	breq	.+108    	; 0x2a2 <setUBRR+0xcc>
 236:	64 f4       	brge	.+24     	; 0x250 <setUBRR+0x7a>
 238:	61 15       	cp	r22, r1
 23a:	26 e9       	ldi	r18, 0x96	; 150
 23c:	72 07       	cpc	r23, r18
 23e:	81 05       	cpc	r24, r1
 240:	91 05       	cpc	r25, r1
 242:	49 f1       	breq	.+82     	; 0x296 <setUBRR+0xc0>
 244:	61 15       	cp	r22, r1
 246:	71 4e       	sbci	r23, 0xE1	; 225
 248:	81 05       	cpc	r24, r1
 24a:	91 05       	cpc	r25, r1
 24c:	39 f1       	breq	.+78     	; 0x29c <setUBRR+0xc6>
 24e:	35 c0       	rjmp	.+106    	; 0x2ba <setUBRR+0xe4>
 250:	61 15       	cp	r22, r1
 252:	24 e8       	ldi	r18, 0x84	; 132
 254:	72 07       	cpc	r23, r18
 256:	23 e0       	ldi	r18, 0x03	; 3
 258:	82 07       	cpc	r24, r18
 25a:	91 05       	cpc	r25, r1
 25c:	41 f1       	breq	.+80     	; 0x2ae <setUBRR+0xd8>
 25e:	60 39       	cpi	r22, 0x90	; 144
 260:	20 ed       	ldi	r18, 0xD0	; 208
 262:	72 07       	cpc	r23, r18
 264:	23 e0       	ldi	r18, 0x03	; 3
 266:	82 07       	cpc	r24, r18
 268:	91 05       	cpc	r25, r1
 26a:	21 f1       	breq	.+72     	; 0x2b4 <setUBRR+0xde>
 26c:	61 15       	cp	r22, r1
 26e:	72 4c       	sbci	r23, 0xC2	; 194
 270:	81 40       	sbci	r24, 0x01	; 1
 272:	91 05       	cpc	r25, r1
 274:	11 f5       	brne	.+68     	; 0x2ba <setUBRR+0xe4>
 276:	18 c0       	rjmp	.+48     	; 0x2a8 <setUBRR+0xd2>
		case 2400:
			return 416;
			break;
		case 4800:
			return 207;
 278:	8f ec       	ldi	r24, 0xCF	; 207
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	08 95       	ret
			break;
		case 9600:
			return 103;
 27e:	87 e6       	ldi	r24, 0x67	; 103
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	08 95       	ret
			break;
		case 14400:
			return 68;
 284:	84 e4       	ldi	r24, 0x44	; 68
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	08 95       	ret
			break;
		case 19200:
			return 51;
 28a:	83 e3       	ldi	r24, 0x33	; 51
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	08 95       	ret
			break;
		case 28800:
			return 34;
 290:	82 e2       	ldi	r24, 0x22	; 34
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	08 95       	ret
			break;
		case 38400:
			return 25;
 296:	89 e1       	ldi	r24, 0x19	; 25
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	08 95       	ret
			break;
		case 57600:
			return 16;
 29c:	80 e1       	ldi	r24, 0x10	; 16
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	08 95       	ret
			break;
		case 76800:
			return 12;
 2a2:	8c e0       	ldi	r24, 0x0C	; 12
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	08 95       	ret
			break;
		case 115200:
			return 8;
 2a8:	88 e0       	ldi	r24, 0x08	; 8
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	08 95       	ret
			break;
		case 230400:
			return 3;
 2ae:	83 e0       	ldi	r24, 0x03	; 3
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	08 95       	ret
			break;
		case 250000:
			return 3;
 2b4:	83 e0       	ldi	r24, 0x03	; 3
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	08 95       	ret
			break;
		default:
			return -1;
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	9f ef       	ldi	r25, 0xFF	; 255
 2be:	08 95       	ret
	serial_port[port]->udr = data; //write in the data = data;
}
int setUBRR(long baud) {
	switch(baud){
		case 2400:
			return 416;
 2c0:	80 ea       	ldi	r24, 0xA0	; 160
 2c2:	91 e0       	ldi	r25, 0x01	; 1
			return 3;
			break;
		default:
			return -1;
	}
}
 2c4:	08 95       	ret

000002c6 <PSerial_open>:
};

static unsigned char port;
static long baudrate;

void PSerial_open(unsigned char portNum, long speed, int framing) {
 2c6:	ef 92       	push	r14
 2c8:	ff 92       	push	r15
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	12 2f       	mov	r17, r18
	port = portNum;
	baudrate = speed;
	serial_port[port]->ubrr = setUBRR(baudrate);
 2d2:	c8 2f       	mov	r28, r24
 2d4:	d0 e0       	ldi	r29, 0x00	; 0
 2d6:	cc 0f       	add	r28, r28
 2d8:	dd 1f       	adc	r29, r29
 2da:	c0 50       	subi	r28, 0x00	; 0
 2dc:	de 4f       	sbci	r29, 0xFE	; 254
 2de:	e8 80       	ld	r14, Y
 2e0:	f9 80       	ldd	r15, Y+1	; 0x01
 2e2:	cb 01       	movw	r24, r22
 2e4:	ba 01       	movw	r22, r20
 2e6:	77 df       	rcall	.-274    	; 0x1d6 <setUBRR>
 2e8:	f7 01       	movw	r30, r14
 2ea:	95 83       	std	Z+5, r25	; 0x05
 2ec:	84 83       	std	Z+4, r24	; 0x04
	serial_port[port]->ucsrc = framing;
 2ee:	e8 81       	ld	r30, Y
 2f0:	f9 81       	ldd	r31, Y+1	; 0x01
 2f2:	12 83       	std	Z+2, r17	; 0x02
	//enable the receiving
	//UCSRnB bit 4
	serial_port[port]->ucsrb |= (1 << 4);
 2f4:	e8 81       	ld	r30, Y
 2f6:	f9 81       	ldd	r31, Y+1	; 0x01
 2f8:	81 81       	ldd	r24, Z+1	; 0x01
 2fa:	80 61       	ori	r24, 0x10	; 16
 2fc:	81 83       	std	Z+1, r24	; 0x01
	//enable the transmitting
	//UCSRnB bit 3
	serial_port[port]->ucsrb |= (1 << 3);
 2fe:	e8 81       	ld	r30, Y
 300:	f9 81       	ldd	r31, Y+1	; 0x01
 302:	81 81       	ldd	r24, Z+1	; 0x01
 304:	88 60       	ori	r24, 0x08	; 8
 306:	81 83       	std	Z+1, r24	; 0x01
}
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	ff 90       	pop	r15
 310:	ef 90       	pop	r14
 312:	08 95       	ret

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
